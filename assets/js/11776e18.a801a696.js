"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[415],{5911:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"programmings","title":"Server Side Programming","description":"Device Initialization","source":"@site/docs/programmings.md","sourceDirName":".","slug":"/programmings","permalink":"/Neo-IMS/docs/programmings","draft":false,"unlisted":false,"editUrl":"https://github.com/Bloxinghouse-Electric-Corporation/Neo-IMS/edit/master/docs/programmings.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"defaultSidebar","previous":{"title":"Introduction","permalink":"/Neo-IMS/docs/intro"},"next":{"title":"Client Side Programming","permalink":"/Neo-IMS/docs/programmingc"}}');var r=t(4848),s=t(8453);const a={sidebar_position:2},l="Server Side Programming",o={},c=[{value:"Device Initialization",id:"device-initialization",level:2},{value:"Referencing",id:"referencing",level:2},{value:"Manipulating the State",id:"manipulating-the-state",level:2},{value:"Recieving Messages",id:"recieving-messages",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"server-side-programming",children:"Server Side Programming"})}),"\n",(0,r.jsx)(n.h2,{id:"device-initialization",children:"Device Initialization"}),"\n",(0,r.jsxs)(n.p,{children:["Server Side device modules are stored within the ",(0,r.jsx)(n.em,{children:"ServerScriptService.IMSSDevices"})," folder. These modules are automatically loaded by the system as explained in ",(0,r.jsx)(n.a,{href:"/Neo-IMS/docs/intro#server-side",children:"Introduction"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The most basic form of a server module looks like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",metastring:'title="ServerScriptService.IMSSDevices.Test"',children:'local types = require(script.Parent.Parent.IMSServer.Types)\nlocal device = require(script.Parent.Parent.IMSServer.Bases.Device)\n\nlocal Module = {}\nModule.__index = Module\nsetmetatable(Module, device)\n\nfunction Module.new(model:Model, initialState:boolean):types.Device<boolean> -- update "boolean" here to the correct type\n\tif initialState ~= nil and type(initialState) ~= "boolean" then -- update "boolean" here to the correct type\n\t\terror("[INTERACTION SYSTEM]: InitialState type for Module must be boolean!") -- update "boolean" here to the correct type\n\t\treturn nil\n\tend\n\t\n\tlocal self = device.new(model, initialState or false) -- "false" is the default value\n\tsetmetatable(self, Module)\n\n\treturn self\nend\n\nreturn Module\n'})}),"\n",(0,r.jsx)(n.p,{children:"The code above does the following in order:\nWhen the module gets initialized by the Interface:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Ensure the initial state passed by the Interface is a valid type for this device or if it is nil, throw and error if it is neither."}),"\n",(0,r.jsx)(n.li,{children:"Instantiate the base device class with the physical device model in the game world and the initial state or set it to a default value if initialState is nil."}),"\n",(0,r.jsx)(n.li,{children:"Return a reference to the device."}),"\n"]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsxs)(n.p,{children:["Most of the time, this default initialization code does ",(0,r.jsx)(n.strong,{children:"NOT"})," need to be altered aside from changing the types and default value to match your device."]}),(0,r.jsx)(n.p,{children:"In future versions of Neo-IMS we plan on simplifying this by providing a default init function."})]}),"\n",(0,r.jsxs)(n.p,{children:["This ",(0,r.jsx)(n.code,{children:"Module.new()"})," function is the only requirement for a valid server side script. The programmer is responsible for further event handling themselves. (Examples are covered later in the docs.)"]}),"\n",(0,r.jsx)(n.h2,{id:"referencing",children:"Referencing"}),"\n",(0,r.jsxs)(n.p,{children:["To get a reference to a device on the server for usage in other scripts (i.e. within the simulation), the ",(0,r.jsx)(n.code,{children:"Interface.GetDevice(name)"})," function is used."]}),"\n",(0,r.jsxs)(n.p,{children:["The name of the model in workspace must be passed to this function.\nIf the device exists, a reference to it will be returned, otherwise the Interface will return nil.\n",(0,r.jsx)(n.strong,{children:"If multiple devices of the same name exist, only one of them will be functional."})]}),"\n",(0,r.jsx)(n.p,{children:"Example of requesting a device reference:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",metastring:'title="ServerScriptService.TestDevice"',children:'local ims = require(script.Parent.IMSServer.Interface)\n\nlocal device = ims.GetDevice("myDevice")\n'})}),"\n",(0,r.jsx)(n.p,{children:'The reference to the device "myDevice" is now stored in the device variable and can be used for further processing. (i.e. getting/setting the state.)'}),"\n",(0,r.jsx)(n.admonition,{type:"important",children:(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Interface.GetDevice()"})," function should only be called once per device and the reference should be saved in a variable!"]})}),"\n",(0,r.jsx)(n.h2,{id:"manipulating-the-state",children:"Manipulating the State"}),"\n",(0,r.jsx)(n.p,{children:"Every device defined in the Neo-IMS system has a State."}),"\n",(0,r.jsx)(n.p,{children:"Examples for a state would be:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The currently selected position on a switch"}),"\n",(0,r.jsx)(n.li,{children:"Whether or not a button is currently depressed"}),"\n",(0,r.jsx)(n.li,{children:"Whether or not an indicator light is currently lit"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"A state can be any type which exists as a Value Object. This means all of the following types are valid:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Boolean"}),"\n",(0,r.jsx)(n.li,{children:"BrickColor"}),"\n",(0,r.jsx)(n.li,{children:"CFrame"}),"\n",(0,r.jsx)(n.li,{children:"Color3"}),"\n",(0,r.jsx)(n.li,{children:"Int"}),"\n",(0,r.jsx)(n.li,{children:"Number"}),"\n",(0,r.jsx)(n.li,{children:"Object"}),"\n",(0,r.jsx)(n.li,{children:"Ray"}),"\n",(0,r.jsx)(n.li,{children:"String"}),"\n",(0,r.jsx)(n.li,{children:"Vector3"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["A state that is only made up of one value is refered to as a ",(0,r.jsx)(n.strong,{children:"Basic State"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The Neo-IMS makes manipulating a Basic State very simple."}),"\n",(0,r.jsxs)(n.p,{children:['In this example we will imagine an indicator light stored in a variable named "indicator".\nFor a simple indicator light the state is a ',(0,r.jsx)(n.strong,{children:"boolean"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["To ",(0,r.jsx)(n.strong,{children:"Set"})," the state of the indicator, you would do the following:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",metastring:'title="ServerScriptService.IndicatorTest"',children:'local indicator = ims.GetDevice("myIndicator")\n\nindicator:SetState(true)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["To ",(0,r.jsx)(n.strong,{children:"Get"})," the state of the indicator, you would do the following:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",metastring:'title="ServerScriptService.IndicatorTest"',children:'local indicator = ims.GetDevice("myIndicator")\n\nlocal value = indicator:GetState()\n\n-- alternative - both do the same thing\nlocal value = indicator.state\n'})}),"\n",(0,r.jsxs)(n.p,{children:["It is also possible to ",(0,r.jsx)(n.strong,{children:"Subscribe"})," to a state change event:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",metastring:'title="ServerScriptService.IndicatorTest"',children:'local indicator = ims.GetDevice("myIndicator")\n\nindicator.OnStateChanged:Connect(function(state)\n    -- your code here\nend)\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["In addition to ",(0,r.jsx)(n.strong,{children:"Basic States"}),", it is also possble to combine multiple values into one state. This is called a ",(0,r.jsx)(n.strong,{children:"Complex State"})]}),"\n",(0,r.jsxs)(n.p,{children:["Complex States are a table which contains multiple different ",(0,r.jsx)(n.strong,{children:"StateKeys"})," (or alternatively, ",(0,r.jsx)(n.strong,{children:"Substates"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["As an example for ",(0,r.jsx)(n.strong,{children:"Setting"})," a ",(0,r.jsx)(n.strong,{children:"Complex State"}),", we will use a traffic light. Traffic lights have three individual lights.\nThis means the state is made up of ",(0,r.jsx)(n.strong,{children:"three booleans"})," named ",(0,r.jsx)(n.strong,{children:"red"}),", ",(0,r.jsx)(n.strong,{children:"yellow"}),", and ",(0,r.jsx)(n.strong,{children:"green"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If we were to use ",(0,r.jsx)(n.code,{children:"trafficlight:SetState()"})," from above, we would need to pass a table containing all three values and the existing state would be replaced. Most of the time, this is not what you want. Instead you can do the following:"]}),"\n",(0,r.jsx)(n.p,{children:"Say we want to turn on only the green light, but leave the remaining two lights how they were."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",metastring:'title="ServerScriptService.TrafficLightTest"',children:'local trafficlight = ims.GetDevice("TrafficLight")\n\nindicator:SetStateKey({green = true}) -- This will only affect the green light, yellow and red will stay as they are.\n'})}),"\n",(0,r.jsx)(n.p,{children:"If you pass multiple keys into this function, they will also be affected."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",metastring:'title="ServerScriptService.TrafficLightTest"',children:'local trafficlight = ims.GetDevice("TrafficLight")\n\nindicator:SetStateKey({green = true, yellow = true}) -- Yellow and green will turn on, red will stay as it was.\n'})}),"\n",(0,r.jsxs)(n.p,{children:["To ",(0,r.jsx)(n.strong,{children:"Get"})," a complex state, the same functions as the ",(0,r.jsx)(n.strong,{children:"Basic State"})," can be used as they will just return a table."]}),"\n",(0,r.jsx)(n.h2,{id:"recieving-messages",children:"Recieving Messages"}),"\n",(0,r.jsx)(n.p,{children:"Messages are data sent by the client to request the server to do something. This could for example be the user clicking on a button."}),"\n",(0,r.jsx)(n.p,{children:"A client message is made up of a table and handling these messages is up to the programmer."}),"\n",(0,r.jsx)(n.p,{children:"To handle a message, add the following to your device's server module:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",metastring:'title="ServerScriptService.IMSServer.Devices.MyDevice"',children:"function Module.RecieveMessage(self:types.Device<boolean>, player:Player, msg:{[string]:any}):boolean\n    -- message handling code\nend\n"})}),"\n",(0,r.jsx)(n.p,{children:"This function needs to return either true or false depending on whether or not handling the message was successful."}),"\n",(0,r.jsxs)(n.admonition,{type:"warning",children:[(0,r.jsx)(n.p,{children:"Neo-IMS by default does not provide any exploit protection for message handling."}),(0,r.jsx)(n.p,{children:"You are required to implement this yourself."})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(6540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);