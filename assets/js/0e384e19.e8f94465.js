"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[976],{7879:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"intro","title":"Introduction","description":"This documentation is highly work in progress!","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/Neo-IMS/docs/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/Bloxinghouse-Electric-Corporation/Neo-IMS/edit/master/docs/intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"defaultSidebar","next":{"title":"Server Side Programming","permalink":"/Neo-IMS/docs/programmings"}}');var t=n(4848),r=n(8453);const o={sidebar_position:1},d="Introduction",l={},c=[{value:"Design",id:"design",level:2},{value:"Structure",id:"structure",level:2},{value:"Server Side",id:"server-side",level:3},{value:"Client Side",id:"client-side",level:3}];function a(e){const i={admonition:"admonition",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,t.jsx)(i.admonition,{type:"warning",children:(0,t.jsx)(i.p,{children:"This documentation is highly work in progress!"})}),"\n",(0,t.jsx)(i.h2,{id:"design",children:"Design"}),"\n",(0,t.jsx)(i.p,{children:"The Neo-IMS (Formerly RP-IMS) is a system designed to handle control and instrumentation systems in an easy to work with but efficient manner."}),"\n",(0,t.jsx)(i.p,{children:"The Neo-IMS gives different types of devices (gauges, switches, indicators, etc.) functionality while ensuring that all scripts are kept in a centralized location and only a minimum of 2 scripts are required per device type."}),"\n",(0,t.jsx)(i.p,{children:"Devices defined in the system can both receive input from players and display an output on a device model."}),"\n",(0,t.jsxs)(i.p,{children:["To achieve this, the Neo-IMS is divided into two sections. The ",(0,t.jsx)(i.strong,{children:"Server Side"})," and the ",(0,t.jsx)(i.strong,{children:"Client Side"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["The use of the ",(0,t.jsx)(i.strong,{children:"Server Side"})," include:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Storing Data about the current state of a device (i.e. position of a switch, on/off on an indicator light)"}),"\n",(0,t.jsx)(i.li,{children:"Recieve and validate state change requests from the client"}),"\n",(0,t.jsx)(i.li,{children:"Change the current state when suitable and send an update to all clients"}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.strong,{children:"Server Side"})," should ",(0,t.jsx)(i.strong,{children:"NOT"})," be used for anything that the client side is responsible for."]}),"\n",(0,t.jsxs)(i.p,{children:["The use of the ",(0,t.jsx)(i.strong,{children:"Client Side"})," include:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Recieving state change updates from the server"}),"\n",(0,t.jsx)(i.li,{children:"Providing visual feedback (animation) for the current state on the device model within the game world"}),"\n",(0,t.jsx)(i.li,{children:"Recieve input from the player and send them to the server for further processing"}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.strong,{children:"Client Side"})," should ",(0,t.jsx)(i.strong,{children:"NOT"})," be used for anything that the Server Side is responsible for."]}),"\n",(0,t.jsx)(i.h2,{id:"structure",children:"Structure"}),"\n",(0,t.jsx)(i.h3,{id:"server-side",children:"Server Side"}),"\n",(0,t.jsxs)(i.p,{children:["The scripts for the ",(0,t.jsx)(i.strong,{children:"Server Side"})," are located within ",(0,t.jsx)(i.em,{children:"ServerScriptService.IMSServer"})," and contains the following children:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Interface"}),": This script is responsible for the following tasks:","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Initializing all devices"}),"\n",(0,t.jsx)(i.li,{children:"Passing references to devices to other scripts"}),"\n",(0,t.jsx)(i.li,{children:"Routing messages and signals from the client to devices"}),"\n",(0,t.jsx)(i.li,{children:"Sending messages and signals from devices to the client"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Types"}),": This script contains all type definitions for the different devices."]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Devices"})," for the server side are located ",(0,t.jsx)(i.em,{children:"ServerScriptService.IMSSDevices"})," This folder contains all Server Side scripts for the different devices. The ModuleScripts contained in this folder are automatically loaded by the ",(0,t.jsx)(i.strong,{children:"Interface"})," on initialization."]}),"\n",(0,t.jsx)(i.h3,{id:"client-side",children:"Client Side"}),"\n",(0,t.jsxs)(i.p,{children:["The scripts for the ",(0,t.jsx)(i.strong,{children:"Client Side"})," are located within ",(0,t.jsx)(i.em,{children:"StarterPlayer.StarterPlayerScripts.IMSClient"})," and contains the following children:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Loader"}),": This script is responsible for the following tasks:","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Initializing all devices"}),"\n",(0,t.jsx)(i.li,{children:"Deciding whether or not to load the VR version of Client Side scripts"}),"\n",(0,t.jsx)(i.li,{children:"Routing messages and signals from the server to devices"}),"\n",(0,t.jsx)(i.li,{children:"Sending messages and signals from devices to the server"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Devices"})," for the client side are located ",(0,t.jsx)(i.em,{children:"StarterPlayer.StarterPlayerScripts.IMSCDevices"})," This folder contains all Client Side scripts for the different devices. The ModuleScripts contained in this folder are automatically loaded by the ",(0,t.jsx)(i.strong,{children:"Loader"})," script on initialization."]}),"\n",(0,t.jsx)(i.p,{children:"This folder also contains the subfolder \u201cVR\u201d for devices which require a different implementation in VR (i.e. switches and buttons)"}),"\n",(0,t.jsx)(i.admonition,{type:"info",children:(0,t.jsx)(i.p,{children:"VR Functionality is WIP!"})})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>d});var s=n(6540);const t={},r=s.createContext(t);function o(e){const i=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:i},e.children)}}}]);