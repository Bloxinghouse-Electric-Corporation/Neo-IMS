"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[162],{7281:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"definition","title":"Workspace Definition","description":"Tagging","source":"@site/docs/definition.md","sourceDirName":".","slug":"/definition","permalink":"/Neo-IMS/docs/definition","draft":false,"unlisted":false,"editUrl":"https://github.com/Bloxinghouse-Electric-Corporation/Neo-IMS/edit/master/docs/definition.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"defaultSidebar","previous":{"title":"Client Side Programming","permalink":"/Neo-IMS/docs/programmingc"},"next":{"title":"Examples","permalink":"/Neo-IMS/docs/examples"}}');var o=n(4848),a=n(8453);const s={sidebar_position:4},d="Workspace Definition",r={},c=[{value:"Tagging",id:"tagging",level:2},{value:"Initial States",id:"initial-states",level:2}];function l(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"workspace-definition",children:"Workspace Definition"})}),"\n",(0,o.jsx)(t.h2,{id:"tagging",children:"Tagging"}),"\n",(0,o.jsx)(t.p,{children:"Once you have the device modules scripted, you still need to ensure that the Neo-IMS knows which models to treat as that device."}),"\n",(0,o.jsx)(t.p,{children:"Doing this is also pretty simple."}),"\n",(0,o.jsx)(t.p,{children:"Simply add a CollectionService tag to the device model named the exact same thing as the module scripts for the device."}),"\n",(0,o.jsxs)(t.p,{children:["Adding the ",(0,o.jsx)(t.code,{children:"ComplexInteractable"})," tag to the parent of the device model will prefix the name of the device with that parent's name."]}),"\n",(0,o.jsxs)(t.p,{children:["So for example, if we have a device named ",(0,o.jsx)(t.code,{children:"L"})," and its parent was named ",(0,o.jsx)(t.code,{children:"Light"}),", tagging the parent with ComplexInteractable would make the final name of the device ",(0,o.jsx)(t.code,{children:"Light L"})]}),"\n",(0,o.jsx)(t.p,{children:"Once you do this, Neo-IMS loads an instance of that device for each tagged model."}),"\n",(0,o.jsx)(t.h2,{id:"initial-states",children:"Initial States"}),"\n",(0,o.jsxs)(t.p,{children:["To define an initial state, simply add a value object to the root of your device model named ",(0,o.jsx)(t.code,{children:"InitialState"})," (Case Sensitive) to define a ",(0,o.jsx)(t.strong,{children:"Basic State"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["Alternatively, add a folder to the root of your device model named ",(0,o.jsx)(t.code,{children:"InitialState"})," to define a ",(0,o.jsx)(t.strong,{children:"Complex State"}),". This folder contains the value objects for the complex state."]}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsx)(t.p,{children:"Subfolders are currently not supported."})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>d});var i=n(6540);const o={},a=i.createContext(o);function s(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);